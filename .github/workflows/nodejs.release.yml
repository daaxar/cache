name: RELEASE (GitFlow)

on:
    push:
        branches:
            - 'release/*'

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'
                  cache: 'npm'
                  registry-url: 'https://npm.pkg.github.com/'

            - name: Check Node version
              run: node -v

            - name: Auth to GitHub Packages
              run: echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build --if-present

            - name: Test
              run: npm test

            - name: Set version from branch name
              id: versioning
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git config --local user.name "github-actions"
                  git config --local user.email "github-actions@github.com"

                  # Extraer el nombre de la rama release (ej. release/1.0.0 o release/1.0.0-beta)
                  RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}
                  if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+(\.[0-9]+)*([-][a-zA-Z0-9]+)?$ ]]; then
                      echo "Error: Release branch name must follow SemVer format after 'release/' (e.g., release/1.0.0 or release/1.0.0-beta)"
                      exit 1
                  fi

                  # Preparar el argumento para npm version
                  if [[ "$RELEASE_VERSION" == *"-"* ]]; then
                      # Si contiene sufijo (ej. -beta), usar prerelease
                      VERSION_TYPE="prerelease"
                      NPM_VERSION="$RELEASE_VERSION"
                  else
                      # Si no hay sufijo, usar exact
                      VERSION_TYPE="exact"
                      NPM_VERSION="$RELEASE_VERSION"
                  fi

                  # Actualizar versión en package.json usando npm version
                  npm version "$NPM_VERSION" -m "chore(release): set version to %s"

                  # Obtener la versión actualizada
                  NEW_VERSION=$(node -p "require('./package.json').version")
                  echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: Push version bump and tag
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git config --local user.name "github-actions"
                  git config --local user.email "github-actions@github.com"
                  git push
                  git push --tags

            - name: Publish package
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Merge release to main and develop
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Limpiar cualquier worktree activo
                  git worktree prune
                  git fetch --all

                  # Merge a main
                  git checkout main
                  git merge --no-ff "refs/heads/${{ github.ref_name }}"
                  git push origin main

                  # Merge a develop
                  git checkout develop
                  git merge --no-ff "refs/heads/${{ github.ref_name }}"
                  git push origin develop

                  # Volver a la rama release y prepararla para borrado
                  git checkout "${{ github.ref_name }}"

                  # Forzar limpieza de worktrees y borrar la rama local
                  git worktree remove --force $(git worktree list | grep "\[${{ github.ref_name }}\]" | awk '{print $1}') 2>/dev/null || true
                  git branch -D "${{ github.ref_name }}"

                  # Borrar la rama remota
                  git push origin --delete "${{ github.ref_name }}"

            - name: Create GitHub Release with auto-generated notes
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.versioning.outputs.VERSION }}
                  name: Release v${{ steps.versioning.outputs.VERSION }}
                  body: |
                      ## Changes in this release

                      - Auto-generated release notes based on commits since last tag.
                      - For detailed changes, see the commits in this repository.

                      ## Merge from release/${{ steps.versioning.outputs.VERSION }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
