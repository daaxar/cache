name: DEVELOP

on:
    push:
        branches: [develop]

jobs:
    build:
        runs-on: ubuntu-latest
        name: Build and test

        outputs:
            should_publish: ${{ steps.check_changes.outputs.should_publish }}

        steps:
            - name: Show pre-installed Node.js version
              run: node --version

            - uses: actions/checkout@v4
              with:
                  fetch-depth: 2 # necesario para diff

            - name: Install Node.js via nvm using .nvmrc
              shell: bash --login {0}
              run: |
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  nvm install --latest-npm --no-progress
                  echo "$(dirname $(nvm which node))" >> $GITHUB_PATH

            - name: Show newly installed Node.js version
              run: node --version

            - name: Install dependencies
              run: npm ci

            - name: Build project
              run: npm run build --if-present

            - name: Run tests
              run: npm test

            - name: Check for relevant changes
              id: check_changes
              run: |
                  CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
                  echo "Changed files:"
                  echo "$CHANGED_FILES"

                  if echo "$CHANGED_FILES" | grep -E '^(src/|package.json)'; then
                    echo "should_publish=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_publish=false" >> $GITHUB_OUTPUT
                    echo "No relevant changes detected. Skipping reversion and publish."
                  fi

    increment-version:
        runs-on: ubuntu-latest
        needs: build
        name: Increment version and push changes

        if: needs.build.outputs.should_publish == 'true'

        steps:
            - uses: actions/checkout@v4

            - name: Install Node.js via nvm using .nvmrc
              shell: bash --login {0}
              run: |
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  nvm install --latest-npm --no-progress
                  echo "$(dirname $(nvm which node))" >> $GITHUB_PATH

            - name: Show newly installed Node.js version
              run: node --version

            - name: Increment version
              id: versioning
              run: |
                  VERSION=$(npm version --no-git-tag-version prerelease --preid beta)
                  echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

            - name: Config GIT user
              run: |
                  git config --local user.name 'an employee of the 7G sector'
                  git config --local user.email ''

            - name: Commit and push new version
              run: |
                  git add package.json package-lock.json
                  git commit -m "chore: bump version to ${{ steps.versioning.outputs.VERSION }}"
                  git push

    publish:
        runs-on: ubuntu-latest
        needs: [build, increment-version]
        name: Publish package

        if: needs.build.outputs.should_publish == 'true'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Node.js via nvm using .nvmrc
              shell: bash --login {0}
              run: |
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  nvm install --latest-npm --no-progress
                  echo "$(dirname $(nvm which node))" >> $GITHUB_PATH

            - name: Pull last changes
              run: |
                  git fetch origin develop --unshallow || true
                  git pull origin develop

            - name: Set up .npmrc
              run: echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build --if-present

            - name: Create pack
              run: npm pack

            - name: Publish package
              run: npm publish --tag beta
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
